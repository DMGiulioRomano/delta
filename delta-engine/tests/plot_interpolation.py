#!/usr/bin/env python3
"""
Interpolation Curve Visualization Tool for Delta-Engine

This script visualizes the different interpolation curves used in the Delta-Engine
state transition system. It reads CSV data generated by test_interpolation.csd
and creates comparative plots to help choose the best interpolation method for
different musical parameters.
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import sys
import os


def plot_interpolation_curves(csv_file):
    """Create visualizations of interpolation curves from CSV data."""
    # Read the data
    try:
        df = pd.read_csv(csv_file)
    except Exception as e:
        print(f"Error reading CSV file: {e}")
        return
    
    # Create plots directory within tests
    output_dir = os.path.join(os.path.dirname(csv_file), "plots")
    os.makedirs(output_dir, exist_ok=True)
    
    # Plot all curves together
    plt.figure(figsize=(12, 8))
    
    plt.plot(df['progress'], df['linear'], 'r-', linewidth=2, label='Linear')
    plt.plot(df['progress'], df['cubic'], 'g-', linewidth=2, label='Cubic (Smoothstep)')
    plt.plot(df['progress'], df['exponential'], 'b-', linewidth=2, label='Exponential (Cosine)')
    
    # Add reference line
    plt.plot([0, 1], [0, 100], 'k--', alpha=0.3, label='Reference Line')
    
    plt.title('Comparison of Interpolation Curves')
    plt.xlabel('Progress (0-1)')
    plt.ylabel('Interpolated Value')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    plt.tight_layout()
    output_path = os.path.join(output_dir, "interpolation_curves.png")
    plt.savefig(output_path, dpi=150)
    
    # Plot first derivatives (rates of change)
    plt.figure(figsize=(12, 8))
    
    # Calculate derivatives
    df['linear_deriv'] = df['linear'].diff() / df['progress'].diff()
    df['cubic_deriv'] = df['cubic'].diff() / df['progress'].diff()
    df['exponential_deriv'] = df['exponential'].diff() / df['progress'].diff()
    
    plt.plot(df['progress'][1:], df['linear_deriv'][1:], 'r-', linewidth=2, label='Linear')
    plt.plot(df['progress'][1:], df['cubic_deriv'][1:], 'g-', linewidth=2, label='Cubic')
    plt.plot(df['progress'][1:], df['exponential_deriv'][1:], 'b-', linewidth=2, label='Exponential')
    
    plt.title('Rate of Change for Interpolation Curves')
    plt.xlabel('Progress (0-1)')
    plt.ylabel('Rate of Change (First Derivative)')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    plt.tight_layout()
    deriv_path = os.path.join(output_dir, "interpolation_derivatives.png")
    plt.savefig(deriv_path, dpi=150)
    
    # Plot difference from linear interpolation
    plt.figure(figsize=(12, 8))
    
    df['cubic_diff'] = df['cubic'] - df['linear']
    df['exp_diff'] = df['exponential'] - df['linear']
    
    plt.plot(df['progress'], df['cubic_diff'], 'g-', linewidth=2, label='Cubic - Linear')
    plt.plot(df['progress'], df['exp_diff'], 'b-', linewidth=2, label='Exponential - Linear')
    plt.axhline(y=0, color='k', linestyle='-', alpha=0.3)
    
    plt.title('Difference from Linear Interpolation')
    plt.xlabel('Progress (0-1)')
    plt.ylabel('Difference in Value')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    plt.tight_layout()
    diff_path = os.path.join(output_dir, "interpolation_differences.png")
    plt.savefig(diff_path, dpi=150)
    
    # Create comparative visualization for musical applications
    fig, axes = plt.subplots(3, 1, figsize=(12, 15), sharex=True)
    
    # Example 1: Rhythm values (higher to lower - Movement transition)
    ax1 = axes[0]
    # Reverse the progress for this example (20 to 2)
    movement_progress = df['progress']
    movement_linear = 20 - df['linear'] * 0.18  # Scale to 20->2 range
    movement_cubic = 20 - df['cubic'] * 0.18
    movement_exp = 20 - df['exponential'] * 0.18
    
    ax1.plot(movement_progress, movement_linear, 'r-', linewidth=2, label='Linear')
    ax1.plot(movement_progress, movement_cubic, 'g-', linewidth=2, label='Cubic')
    ax1.plot(movement_progress, movement_exp, 'b-', linewidth=2, label='Exponential')
    
    ax1.set_title('Movement Transition: Static (20) → Dynamic (2)')
    ax1.set_ylabel('Rhythm Value')
    ax1.grid(True, alpha=0.3)
    ax1.legend()
    
    # Example 2: Harmonic duration (longer to shorter - Density transition)
    ax2 = axes[1]
    # Scale to 25->5 range
    density_linear = 25 - df['linear'] * 0.2
    density_cubic = 25 - df['cubic'] * 0.2
    density_exp = 25 - df['exponential'] * 0.2
    
    ax2.plot(df['progress'], density_linear, 'r-', linewidth=2, label='Linear')
    ax2.plot(df['progress'], density_cubic, 'g-', linewidth=2, label='Cubic')
    ax2.plot(df['progress'], density_exp, 'b-', linewidth=2, label='Exponential')
    
    ax2.set_title('Density Transition: Sparse (25s) → Dense (5s)')
    ax2.set_ylabel('Harmonic Duration (s)')
    ax2.grid(True, alpha=0.3)
    ax2.legend()
    
    # Example 3: Amplitude values (higher to lower - Register transition)
    ax3 = axes[2]
    # Scale to -12->-24 range
    register_linear = -12 - df['linear'] * 0.12
    register_cubic = -12 - df['cubic'] * 0.12
    register_exp = -12 - df['exponential'] * 0.12
    
    ax3.plot(df['progress'], register_linear, 'r-', linewidth=2, label='Linear')
    ax3.plot(df['progress'], register_cubic, 'g-', linewidth=2, label='Cubic')
    ax3.plot(df['progress'], register_exp, 'b-', linewidth=2, label='Exponential')
    
    ax3.set_title('Register Transition: Low (-12dB) → High (-24dB)')
    ax3.set_xlabel('Transition Progress')
    ax3.set_ylabel('Amplitude (dB)')
    ax3.grid(True, alpha=0.3)
    ax3.legend()
    
    plt.tight_layout()
    musical_path = os.path.join(output_dir, "musical_applications.png")
    plt.savefig(musical_path, dpi=150)
    
    print(f"Visualizations created:")
    print(f"1. Main comparison: {output_path}")
    print(f"2. Rate of change: {deriv_path}")
    print(f"3. Difference from linear: {diff_path}")
    print(f"4. Musical applications: {musical_path}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python plot_interpolation.py <interpolation_curves.csv>")
        sys.exit(1)
    
    csv_file = sys.argv[1]
    plot_interpolation_curves(csv_file)